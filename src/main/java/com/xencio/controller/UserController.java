package com.xencio.controller;import cn.hutool.core.bean.BeanUtil;import cn.hutool.core.util.ObjectUtil;import cn.hutool.core.util.StrUtil;import cn.hutool.crypto.digest.DigestUtil;import cn.hutool.crypto.digest.MD5;import com.xencio.common.Result;import com.xencio.common.dto.LoginUserDTO;import com.xencio.common.dto.RegisterDTO;import com.xencio.config.shiro.JwtToken;import com.xencio.entity.User;import com.xencio.service.UserService;import com.xencio.utils.JwtUtil;import com.xencio.utils.SnowflakeIdGenerator;import org.apache.shiro.SecurityUtils;import org.apache.shiro.subject.Subject;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.validation.annotation.Validated;import org.springframework.web.bind.annotation.*;import javax.servlet.http.HttpServletResponse;@RestController@RequestMapping("user")public class UserController {    @Autowired    UserService userService;    @GetMapping("/get")    public User getUser(String username) {        return userService.getUserByUsername(username);    }    @PostMapping("/login")    public Result login(@RequestBody LoginUserDTO user, HttpServletResponse response) {        if (StrUtil.isBlank(user.getPassword()) || StrUtil.isBlank(user.getUsername())) return Result.fail("参数错误");        String tokenStr = JwtUtil.sign(user.getUsername(), DigestUtil.md5Hex(user.getPassword()));        JwtToken token = new JwtToken(tokenStr);        Subject subject = SecurityUtils.getSubject();        Result res = null;        try {            subject.login(token);            System.out.println("login success");            res = Result.succ("login success");            HttpServletResponse httpServletResponse = (HttpServletResponse) response;            httpServletResponse.setHeader("token", tokenStr);        }catch (Exception e){            e.printStackTrace();            res = Result.fail("认证失败===");            System.out.println("login fail");        }        return res;    }    @PostMapping("/register")    public Result registerAccount(@RequestBody RegisterDTO registerDTO) {        if (StrUtil.isBlank(registerDTO.getPassword()) || StrUtil.isBlank(registerDTO.getUsername()) || registerDTO != null) return Result.fail("参数错误");        // 0, 查询用户是否已经存在        User user = userService.getUserByUsername(registerDTO.getUsername());        if (ObjectUtil.isNotEmpty(user)) return Result.fail("username is exist!");        // 1. 生成用户的ID, uuid        long id = SnowflakeIdGenerator.getPrimaryKey();        // 2. 对密码进行 加密        registerDTO.setPassword(DigestUtil.md5Hex(registerDTO.getPassword()));        user = new User();        // 3, 当前bean 设置密码        BeanUtil.copyProperties(registerDTO, user);        user.setId(id);        final int save = userService.save(user);        return  save == 1? Result.succ("注册成功"): Result.fail("注册失败");    }}